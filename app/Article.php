<?php

namespace App;

use App\Scope\DraftScope;
use App\Services\Markdowner;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * Class Article
 * @package App
 */
class Article extends Model
{
    use SoftDeletes;
    /**
     * @var array
     */
    protected $fillable=[
        'title',
        'subtitle',
        'content',
        'slug',
        'page_image',
        'meta_description',
        'published_at',
        'is_draft',
        'is_original',
        'view_count',
        'user_id',
        'last_user_id',
    ];

    /**
     * @var array
     */
    protected $dates=[
        'created_at',
        'updated_at',
        'deleted_at',
        'published_at'
    ];
    /**
     *
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new DraftScope());
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
     */
    public function tags()
    {
        return $this->morphToMany(Tag::class,'taggable');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany
     */
    public function comments()
    {
        return $this->morphMany(Comment::class,'commentable');
    }

    public function setTitleAttribute($value)
    {
        $this->attributes['title']=$value;
        if (!config('services.youdao.appKey') || !config('services.youdao.appSecret')) {
            $this->setUniqueSlug($value, '');
        } else {
            $this->attributes['slug'] = translug($value);
        }
    }

    public function setUniqueSlug($slug,$extra='')
    {
        $slug=str_slug($slug.'-'.$extra);
        if (static::whereSlug($slug)->exists()){
            $this->setUniqueSlug($slug,(int)($extra+1));
            return;
        }
        $this->attributes['slug']=$slug;
    }

    public function setContentAttribute($value)
    {
        $data = [
            'raw'  => $value,
            'html' => (new Markdowner)->convertMarkdownToHtml($value)
        ];

        $this->attributes['content'] = json_encode($data);
    }
}
